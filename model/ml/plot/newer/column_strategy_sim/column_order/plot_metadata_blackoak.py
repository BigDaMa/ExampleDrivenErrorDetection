import numpy as np
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform_latex


labels_optimum = [4, 8, 12, 16, 20, 24, 28, 38, 48, 58, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 238, 248, 258, 268, 278, 288, 298, 308, 318, 328, 338, 348, 358, 368, 378, 388, 398, 408, 418, 428, 438, 448, 458, 468, 478, 488, 498]

maxchangeprediction_sim = []
maxchangeprediction_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14240343779747952, 0.5741965011024701, 0.6522479213872837, 0.7754172263354274, 0.7760354484889256, 0.7886550125007961, 0.8625738170285875, 0.8664221239180575, 0.9191903434625089, 0.9445891677030243, 0.9546847395584553, 0.977272914372516, 0.9782175022791663, 0.9825590699897889, 0.9835473208284838, 0.9858438556298041, 0.9862789749449181, 0.9867489883281246, 0.9873642833247434, 0.9875699852855847, 0.9876169138039211, 0.9876579582550725, 0.9877224426460145, 0.9877500280694329, 0.9877967920183177, 0.9878396541412682, 0.9879057446863408, 0.9879883926922097, 0.9880437462598556, 0.9880850102522768, 0.988103026298025, 0.988128042028823, 0.9881348434606474, 0.9881643646306744, 0.9881775007929707, 0.9881856699662646, 0.9881970667048654, 0.9881939523341062, 0.9882115662464116, 0.9871735662482546, 0.9886146667263362, 0.9886847586579928, 0.9887262074959751, 0.9887348054626036])
average_maxchangeprediction_sim = list(np.mean(np.matrix(maxchangeprediction_sim), axis=0).A1)

roundrobin_sim = []
roundrobin_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14240343779747952, 0.5741965011024701, 0.6522479213872837, 0.7754172263354274, 0.7754172263354274, 0.7754172263354274, 0.775418132047588, 0.871338229706571, 0.8709412287666478, 0.9472626934299377, 0.9472626934299377, 0.9472428781750004, 0.9472485595738641, 0.9472558919151016, 0.9464733397005872, 0.9536015430030131, 0.9712162728232835, 0.9712162728232835, 0.9712404124209641, 0.9712586684482545, 0.9713208485657387, 0.9789515817255241, 0.981880528861943, 0.9829240209936009, 0.9829240209936009, 0.982926277837357, 0.9829540930717512, 0.9831128220184269, 0.9821432401772521, 0.9835035906407338, 0.9835873445732608, 0.9835873445732608, 0.9835883214692899, 0.983679387602067, 0.9839458845330394, 0.9859109707045816, 0.9871212850018241, 0.9893741196356645, 0.9893741196356645, 0.989326220143066, 0.9893659169127001, 0.9897595394677186, 0.9899366636508347, 0.9901369708481971])
average_roundrobin_sim = list(np.mean(np.matrix(roundrobin_sim), axis=0).A1)

maxuncertainty_sim = []
maxuncertainty_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14240343779747952, 0.5741965011024701, 0.6522479213872837, 0.7754172263354274, 0.8348535468119946, 0.9201583523198711, 0.9467868300437523, 0.9557015103847423, 0.9699006951278741, 0.9746786998563955, 0.9762495029966646, 0.976545131810877, 0.9790016833913986, 0.9784384381945717, 0.980207552681498, 0.9776896583207882, 0.9821551159400732, 0.9837952497957545, 0.9829444718035221, 0.9851874777131442, 0.9842950322383803, 0.9858819102302974, 0.986225954973888, 0.986627587462511, 0.9869414419184146, 0.9870350877016698, 0.9873929884459466, 0.9878255751809604, 0.9886482204112863, 0.988889526263099, 0.9890766571575952, 0.9890557075074599, 0.9898389569861441, 0.9898419789080177, 0.9899748656743992, 0.9912639400969289, 0.991396010646308, 0.9915440908783468, 0.9920261300132875, 0.9921330040192424, 0.992160054515851, 0.9921668779730888, 0.992212602756771, 0.9922987806783])
average_maxuncertainty_sim = list(np.mean(np.matrix(maxuncertainty_sim), axis=0).A1)

random_sim = []
random_sim.append([0.0, 0.02965505551084451, 0.05328058226608546, 0.10611647145222661, 0.17102234442045755, 0.22902931107530666, 0.28925931195141086, 0.33022941086549457, 0.38266072626353825, 0.4324395615767606, 0.4886589019314443, 0.5348420720177528, 0.5763647775677587, 0.6138378888861478, 0.6699781978629058, 0.6956219424947618, 0.7304368195534799, 0.7674483511108211, 0.7926032833965618, 0.8072841875551918, 0.831439126315282, 0.8454503455278995, 0.8574429399359937, 0.8677705466349634, 0.8774371491388305, 0.9034489115045586, 0.9089279071069154, 0.9169440868727091, 0.9239097004470451, 0.9294023990177979, 0.9330789822285138, 0.937220930299462, 0.9405019467724942, 0.9426315101682379, 0.9519411764421026, 0.9541548055083724, 0.9559592202623027, 0.9606428381471592, 0.9632029017494946, 0.9650258779007238, 0.9675902190777071, 0.9721832483245172, 0.9731736434070993, 0.9757015681075001, 0.9756170130469808, 0.9775631313804013, 0.9779725015373141, 0.9790333529906106, 0.979886259728022, 0.9813921745537654, 0.9824531224348633, 0.985974849318477, 0.9861267460524242, 0.9865908215701141])
average_random_sim = list(np.mean(np.matrix(random_sim), axis=0).A1)

mincross_sim = []
mincross_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14240343779747952, 0.5741965011024701, 0.6522479213872837, 0.7754172263354274, 0.7754172263354274, 0.775399628959949, 0.775400670368303, 0.7754028479366213, 0.7754050585699892, 0.7754067031046276, 0.7754084742271505, 0.7754104685866244, 0.7754214331862374, 0.7754209086432496, 0.7754482588543511, 0.7806498266865307, 0.7898976537431849, 0.789904343758194, 0.8013117459444409, 0.8111184516521497, 0.8111444333207114, 0.8111525097860965, 0.8260312785267606, 0.8552354963825746, 0.8691040396975713, 0.869124672007902, 0.8692941895764219, 0.8716682040613545, 0.8704428959824794, 0.8722013794380157, 0.8845419011425062, 0.9015456698257538, 0.9125654847435708, 0.9125889328379637, 0.9128456991626133, 0.9114348838812548, 0.9170746621791956, 0.9255775457916725, 0.9220424821453392, 0.9371792983643369, 0.9513698716019864, 0.9534136412401881, 0.9592024782618453, 0.9593291575133895])
average_mincross_sim = list(np.mean(np.matrix(mincross_sim), axis=0).A1)



ranges = [labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum
		  ]
list = [average_maxuncertainty_sim,
		average_maxchangeprediction_sim,
		average_roundrobin_sim,
		average_random_sim,
		average_mincross_sim
		]
names = [
		 "Min certainty",
		 "Max prediction change",
	     "Round robin",
		 "Random",
	     "Max training error"
		 ]

plot_list_latex(ranges, list, names, "Address", x_max=200)
plot_list(ranges, list, names, "Address", x_max=200, end_of_round=98)
plot_integral(ranges, list, names, "Address", x_max=150, x_min=98)