import numpy as np
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform_latex


labels_optimum = [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 238, 248, 258, 268, 278, 288, 298, 308, 318, 328, 338, 348, 358, 368, 378, 388, 398, 408, 418, 428, 438, 448, 458, 468, 478, 488, 498, 508, 518, 528, 538, 548, 558, 568, 578, 588, 598, 608, 618, 628, 638, 648, 658, 668, 678, 688, 698, 708, 718, 728, 738, 748, 758, 768, 778, 788, 798, 808, 818, 828, 838]

maxchangeprediction_sim = []
maxchangeprediction_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003885070524431571, 0.003885070524431571, 0.006569812682857938, 0.01439283234615854, 0.04485733263757861, 0.05662233258418616, 0.0642949778866368, 0.06664898909402753, 0.06665370915477775, 0.07728163687154739, 0.10936508954335604, 0.14568148637618314, 0.1463533753128166, 0.14801402985877285, 0.1483425131965938, 0.14862242221387584, 0.1497865261838863, 0.3085640402959767, 0.3395009289297092, 0.36699814589701296, 0.40075871468094937, 0.42129763047853286, 0.4353427741063397, 0.4673536880912099, 0.47362375901798454, 0.4935100752545149, 0.5194506493748435, 0.5481259327675786, 0.5707735249253667, 0.59272849450845, 0.6066317418195117, 0.6390019517832706, 0.6487451556817843, 0.6606179829338568, 0.6804739659633638, 0.6805328893188227, 0.6985444695524068, 0.7028704825695558, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869, 0.707370498356869])
average_maxchangeprediction_sim = list(np.mean(np.matrix(maxchangeprediction_sim), axis=0).A1)

roundrobin_sim = []
roundrobin_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.044857332637578615, 0.05662233258418616, 0.0642949778866368, 0.06664898909402753, 0.06665370915477775, 0.0772816368715474, 0.10936508954335603, 0.14568148637618317, 0.1463533753128166, 0.1480140298587729, 0.1483425131965938, 0.14862242221387587, 0.14978652618388633, 0.17533103817311177, 0.18438692554145097, 0.1972305596156796, 0.21344690072364464, 0.23597651441227407, 0.2538890421438915, 0.27842071813205427, 0.3008449922281828, 0.5814886054926818, 0.6197456892590328, 0.6209965760391913, 0.6244594343943521, 0.6321529625445699, 0.6496066039789375, 0.6532860170383307, 0.6584549397209359, 0.6659812002487099, 0.6731297640371741, 0.6959031294170601, 0.7203352236020013, 0.7432069057476367, 0.7432069057476367, 0.7546666702656433, 0.772683348606094, 0.7862375301787994, 0.8599515426679529, 0.8599515426679529, 0.8599515426679529, 0.8599515426679529, 0.8744562723504355, 0.88404882437382, 0.9029823711558784, 0.9122123297184173, 0.9332610209056265, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9369660703312208, 0.9459310558399683, 0.9646569806088493, 0.9687490924673468, 0.9836912161694485, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366, 0.9885940326206366])
average_roundrobin_sim = list(np.mean(np.matrix(roundrobin_sim), axis=0).A1)

maxuncertainty_sim = []
maxuncertainty_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.044857332637578615, 0.05662233258418616, 0.0642949778866368, 0.06664898909402753, 0.06665370915477775, 0.0772816368715474, 0.10936508954335603, 0.14568148637618317, 0.1463533753128166, 0.1480140298587729, 0.1483425131965938, 0.14862242221387587, 0.14978652618388633, 0.30929437737462845, 0.3309329897411624, 0.384595861529624, 0.42812409779209604, 0.46439608551607864, 0.4890517667567627, 0.5230540349079116, 0.5647015686100992, 0.589838698425196, 0.6193318644799407, 0.6443620533373531, 0.6509912106829165, 0.6677159788606052, 0.6732687071208256, 0.6883365880394229, 0.7053069821711484, 0.7154222166065335, 0.7345369307381042, 0.735977373869396, 0.7368039094428388, 0.7415838832463553, 0.749762890609291, 0.7592027570642216, 0.772961667012409, 0.783847583582652, 0.7978724325638074, 0.8180352093863797, 0.8247291136112439, 0.8389998537006195, 0.8518416920049319, 0.8582438997472457, 0.8728306471426824, 0.874660127860684, 0.8795493845198546, 0.8951300610676938, 0.903883395494528, 0.9177761761930036, 0.923599824952049, 0.9304209211605766, 0.9387895681766603, 0.9437868594098532, 0.9468163283423403, 0.9506960131604375, 0.9540854301345586, 0.9541950517899741, 0.9561140357531125, 0.9644673713416434, 0.9650942934119175, 0.9673752664606091, 0.9678904400799642, 0.969771584288701, 0.9707168164265937, 0.9707168164265937, 0.971438780298006, 0.9736831383370486, 0.975891973678414, 0.975891973678414, 0.976099696063556, 0.976099696063556, 0.9763993689257674])
average_maxuncertainty_sim = list(np.mean(np.matrix(maxuncertainty_sim), axis=0).A1)

random_sim = []
random_sim.append([0.0, 0.0013183938756548114, 0.003263171025917255, 0.007696928700221688, 0.012889875989895857, 0.018688741256329848, 0.022736706571375605, 0.029084699640070103, 0.036597837363818345, 0.04605662707474025, 0.05653585673213362, 0.07023961394540677, 0.08503751091325476, 0.09787037767572569, 0.11227372300712268, 0.12271867909227552, 0.13401693093111733, 0.14409247849549817, 0.15908490226509076, 0.17061901969059134, 0.18196645138915737, 0.19790893208747387, 0.2185214640115226, 0.23438427107187135, 0.24335805411054026, 0.2540613649155391, 0.263289698999261, 0.2776998931692259, 0.29038265612085573, 0.30245482832946624, 0.30890313343801007, 0.32613997005055073, 0.34088335362719385, 0.3521780235785565, 0.37119631475338977, 0.38657059917318215, 0.3958373271181674, 0.4024067737540145, 0.4152405456489434, 0.4341576539724483, 0.4419619493312565, 0.45170266503497847, 0.46964415963423223, 0.47849888584098577, 0.48552742993926246, 0.5025954816138465, 0.5198526700628634, 0.5375864836582136, 0.5472095383007493, 0.5688319783152307, 0.5755635892624581, 0.5830254290086899, 0.5972044141590385, 0.6104674965490121, 0.625471866095486, 0.6331849545058252, 0.6449867143665702, 0.6540031264503493, 0.6574972109895023, 0.6670472741672147, 0.6775652535890115, 0.6916668528373094, 0.7006489509362926, 0.7158409538976628, 0.726825328868861, 0.7328902517046203, 0.7461998269538523, 0.7517271235973184, 0.7630094525198077, 0.7717931316831599, 0.7738430889274264, 0.7786737354921811, 0.788521042583596, 0.7939907633704784, 0.801074914590075, 0.8159843651864853, 0.8166087374315667, 0.8173509055618298, 0.8234230524935765, 0.8242058069635523, 0.8288913075962607, 0.8291307621761114, 0.8344443223396475, 0.8360808842904148, 0.8420033992573276, 0.840746803635779, 0.8464947745175708, 0.8490607803694775, 0.8526172192144075, 0.8575294101862125, 0.8612495224643864, 0.8725372986425907, 0.8771444394396749, 0.8794894709937681])
average_random_sim = list(np.mean(np.matrix(random_sim), axis=0).A1)

mincross_sim = []
mincross_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003885070524431571, 0.003885070524431571, 0.006569812682857938, 0.01439283234615854, 0.04485733263757861, 0.05662233258418616, 0.0642949778866368, 0.06664898909402753, 0.06665370915477775, 0.07728163687154739, 0.10936508954335604, 0.14568148637618314, 0.1463533753128166, 0.14801402985877285, 0.1483425131965938, 0.14862242221387584, 0.1497865261838863, 0.17533103817311177, 0.18399838004442096, 0.20268189258117514, 0.2155868615256286, 0.23674074267670436, 0.2562619043662966, 0.2822874337907978, 0.2942736718951854, 0.3168918669530136, 0.3382560547023648, 0.3625829551937785, 0.3826565841386638, 0.3946816972044157, 0.40112584192623946, 0.4110513727220836, 0.42064478417677603, 0.43274134447082835, 0.4382778987376419, 0.4505353312334505, 0.453780748640596, 0.46005905154305504, 0.4711681915805503, 0.479091071978418, 0.4889018974597722, 0.4966876483864441, 0.5035169525795001, 0.5049143791539918, 0.5078820067653457, 0.5522789449002377, 0.6327111108049107, 0.7276739774851106, 0.8151525068488767, 0.9102366949410501, 0.9673762264656738, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532, 0.9890395922575532])
average_mincross_sim = list(np.mean(np.matrix(mincross_sim), axis=0).A1)



ranges = [labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum
		  ]
list = [average_maxuncertainty_sim,
		average_maxchangeprediction_sim,
		average_roundrobin_sim,
		average_random_sim,
		average_mincross_sim
		]
names = [
		 "Min certainty",
		 "Max prediction change",
	     "Round robin",
		 "Random",
	     "Max training error"
		 ]


plot_list(ranges, list, names, "Hospital", x_max=800)
plot_list_latex(ranges, list, names, "Hosital", x_max=800)
#plot_integral(ranges, list, names, "Flights", x_max=200,x_min=56, sorted=True)
#plot_end(ranges, list, names, "Flights", x_max=200,x_min=56, sorted=True)
#plot_outperform(ranges, list, names, "Flights", 0.7366, x_max=200)

#plot_outperform(ranges, list, names, "Flights", 0.9, x_max=200)