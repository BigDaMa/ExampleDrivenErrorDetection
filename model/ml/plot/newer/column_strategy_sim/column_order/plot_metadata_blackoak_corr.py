import numpy as np
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform_latex


labels_optimum = [4, 8, 12, 16, 20, 24, 28, 38, 48, 58, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 238, 248, 258, 268, 278, 288, 298]


maxchangeprediction_sim = []
maxchangeprediction_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11605914118716525, 0.5648112665177517, 0.6570859403891651, 0.7742443123509177, 0.7521682485514042, 0.7685787213781929, 0.8278347717537944, 0.8536717298102445, 0.898896230864769, 0.9071246189488035, 0.9542008050431182, 0.9543190438803931, 0.9777617413385016, 0.982005542908323, 0.9833824854367765, 0.98422041346165, 0.9866126419682331, 0.9867369593684325, 0.9850044755893664, 0.9870039871323609, 0.9848251821771475, 0.9877380357417174, 0.9879492587096947, 0.9880778648456552])
average_maxchangeprediction_sim = list(np.mean(np.matrix(maxchangeprediction_sim), axis=0).A1)

roundrobin_sim = []
roundrobin_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11605914118716525, 0.5648112665177517, 0.657085940389165, 0.7742443123509177, 0.7742443123509177, 0.7742443123509177, 0.7742461420933701, 0.8800544828890089, 0.8564298675423068, 0.9313666187905365, 0.9363845280333425, 0.9363868578225553, 0.9363910580425424, 0.9363847694584113, 0.9370320521308921, 0.9587262659128306, 0.9675805249290288, 0.9675805249290288, 0.9675838063923449, 0.9675843067135549, 0.9676329139369242, 0.9642071738720738, 0.9727609906888366, 0.9757051572831467])
average_roundrobin_sim = list(np.mean(np.matrix(roundrobin_sim), axis=0).A1)

maxuncertainty_sim = []
maxuncertainty_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11605914118716525, 0.5648112665177517, 0.657085940389165, 0.7742443123509177, 0.8354183260657496, 0.9040203872254875, 0.9391333823225386, 0.9363832128243583, 0.9545087111872792, 0.9624430633396907, 0.9634742197133412, 0.9681483146816303, 0.9712605197182045, 0.9726542851431228, 0.9754494512061171, 0.9754727844848088, 0.9786379237054141, 0.9774302071276224, 0.9808547995936147, 0.9840017924726775, 0.9838326073348762, 0.9844513809613907, 0.9848164605676899, 0.98513465038225])
average_maxuncertainty_sim = list(np.mean(np.matrix(maxuncertainty_sim), axis=0).A1)

random_sim = []
random_sim.append([0.0, 0.01754864910074672, 0.05152569815251045, 0.10568469805606658, 0.1652532589548252, 0.22678487294627156, 0.2927731320652669, 0.34609864666286844, 0.4013164260166988, 0.4446868917987977, 0.4948336650172324, 0.538232816259965, 0.5853139219564961, 0.6232654192307255, 0.6649637528138191, 0.6979200457697031, 0.7166841469934786, 0.7399140304812817, 0.7583404500455516, 0.7810747056296755, 0.7957360752106536, 0.8186977608617266, 0.8397083169804078, 0.8547344209017532, 0.865141272544766, 0.8774620773734454, 0.884310308729904, 0.8902267605079716, 0.90038869504074, 0.9109059295741795, 0.9168805535041686, 0.9281279939293148, 0.9340149125254201, 0.9377845838687229])
average_random_sim = list(np.mean(np.matrix(random_sim), axis=0).A1)

mincross_sim = []
mincross_sim.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11605914118716525, 0.5648112665177517, 0.6570859403891651, 0.7742443123509177, 0.7742443123509177, 0.7742476183185435, 0.7742522896141691, 0.7742549795776777, 0.7742585130741649, 0.7742641224471603, 0.7742666171165894, 0.774267171581001, 0.7742440990455878, 0.7742511662516355, 0.7742558493916196, 0.774229641597665, 0.7742651000164986, 0.774283478220178, 0.7807270182947231, 0.7896535456843988, 0.8192236298890002, 0.8569777300777947, 0.8625293195130892, 0.8625505699236378])
average_mincross_sim = list(np.mean(np.matrix(mincross_sim), axis=0).A1)



ranges = [labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum
		  ]
list = [average_maxuncertainty_sim,
		average_maxchangeprediction_sim,
		average_roundrobin_sim,
		average_random_sim,
		average_mincross_sim
		]
names = [
		 "Min certainty (MC)",
		 "Max prediction change (MPC)",
	     "Round-robin (RR)",
		 "Random (RA)",
	     "Max error (ME)"
		 ]

plot_list_latex(ranges, list, names, "Address", x_max=200)
plot_list(ranges, list, names, "Address", x_max=200, end_of_round=98)
plot_integral(ranges, list, names, "Address", x_max=150, x_min=98)