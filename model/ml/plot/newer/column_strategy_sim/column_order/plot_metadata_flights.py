import numpy as np
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform_latex


labels_optimum = [4, 8, 12, 16, 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 246, 256]

maxchangeprediction_sim = []
maxchangeprediction_sim.append([0.0, 0.0, 0.0, 0.0, 0.3009828033510852, 0.5261875013216127, 0.6574735566846837, 0.7838476062023378, 0.7946078657749754, 0.8003439153483137, 0.8137955383066025, 0.8144967650454366, 0.8357611898982198, 0.8495486976762315, 0.8629860344240547, 0.875570566427918, 0.8849612079074157, 0.8918987256379223, 0.8994450701365169, 0.9049151571811832, 0.910632388760811, 0.9155387039563632, 0.9186844601725108, 0.9229476927556505, 0.9252962439642077, 0.9298925053139158, 0.9335288736723326, 0.9371091816323753])
average_maxchangeprediction_sim = list(np.mean(np.matrix(maxchangeprediction_sim), axis=0).A1)

roundrobin_sim = []
roundrobin_sim.append([0.0, 0.0, 0.0, 0.0, 0.3009828033510852, 0.5261875013216127, 0.6574735566846837, 0.7838476062023378, 0.7845516442694597, 0.8077284089395477, 0.8171283073996622, 0.8144967650454366, 0.815783035593926, 0.8247246062143999, 0.853248521794673, 0.8722158974050188, 0.8727450036947658, 0.8789362287515846, 0.8861534753263417, 0.8946040440409535, 0.8947060027113842, 0.8994117709409439, 0.9026873018364571, 0.9089028737178954, 0.9090858343960146, 0.9135407303039831, 0.9158760262166474, 0.9200130498589572])
average_roundrobin_sim = list(np.mean(np.matrix(roundrobin_sim), axis=0).A1)

maxuncertainty_sim = []
maxuncertainty_sim.append([0.0, 0.0, 0.0, 0.0, 0.3009828033510852, 0.5261875013216127, 0.6574735566846837, 0.7838476062023378, 0.7889281216279175, 0.7966459938487097, 0.8155764784363694, 0.8340225045292667, 0.8467671035322368, 0.861908390684745, 0.87429555337602, 0.8814245695785825, 0.8880835123925991, 0.8926581255143615, 0.8976074732499342, 0.9024917129518293, 0.9081079570444335, 0.9118599009653838, 0.9173633562596045, 0.9202480039563478, 0.9232285636775994, 0.9243026199361546, 0.9281721415287523, 0.9329826853990767])
average_maxuncertainty_sim = list(np.mean(np.matrix(maxuncertainty_sim), axis=0).A1)

random_sim = []
random_sim.append([0.0, 0.062042856168336186, 0.20476530395666082, 0.3185672113831578, 0.4236052535734674, 0.5109724238607911, 0.5661545460192633, 0.6237881087503628, 0.6767141929052353, 0.7173157149287003, 0.7460330283805682, 0.7774065194999613, 0.7954747924085689, 0.810796789552182, 0.8261919940848247, 0.8386281054479242, 0.847617278227781, 0.8570796568959218, 0.8641895113255765, 0.8738608179096087, 0.8796895747388177, 0.8848955486768293, 0.8892711900312493, 0.8942864754067054, 0.8985795330429953, 0.9042002168140008, 0.9099382033544225, 0.9138708515324521])
average_random_sim = list(np.mean(np.matrix(random_sim), axis=0).A1)

mincross_sim = []
mincross_sim.append([0.0, 0.0, 0.0, 0.0, 0.3009828033510852, 0.5261875013216127, 0.6574735566846837, 0.7838476062023378, 0.7885444469206749, 0.7997303753118736, 0.8186102743339273, 0.8329358313781597, 0.8437938520580008, 0.8531395730406421, 0.8629667339156795, 0.8662428131920145, 0.8748991295277847, 0.8795234841572859, 0.8851626267677959, 0.8873059875053653, 0.893379959871902, 0.8956986679265745, 0.8991179893795247, 0.9020085624994365, 0.9049610425028453, 0.9068703166518117, 0.9099778200722668, 0.9124399582367376])
average_mincross_sim = list(np.mean(np.matrix(mincross_sim), axis=0).A1)



ranges = [labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum,
		  labels_optimum
		  ]
list = [average_maxuncertainty_sim,
		average_maxchangeprediction_sim,
		average_roundrobin_sim,
		average_random_sim,
		average_mincross_sim
		]
names = [
		 "Min certainty",
		 "Max prediction change",
	     "Round robin",
		 "Random",
	     "Max training error"
		 ]


plot_list(ranges, list, names, "Flights", x_max=200, end_of_round=56)
plot_list_latex(ranges, list, names, "Flights", x_max=200)
#plot_integral(ranges, list, names, "Flights", x_max=200,x_min=56, sorted=True)
#plot_end(ranges, list, names, "Flights", x_max=200,x_min=56, sorted=True)
#plot_outperform(ranges, list, names, "Flights", 0.7366, x_max=200)

#plot_outperform(ranges, list, names, "Flights", 0.9, x_max=200)