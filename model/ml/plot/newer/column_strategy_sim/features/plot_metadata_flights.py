import numpy as np
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_list
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_integral_latex
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform
from ml.plot.newer.column_strategy_sim.plotlatex_lib import plot_outperform_latex


labels_all = [4, 8, 12, 16, 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 246, 256]

char_unigram_sim = []
char_unigram_sim.append([0.0, 0.0, 0.0, 0.0, 0.3024153914981233, 0.5282507980398206, 0.654907745648127, 0.7618137091175938, 0.7724794546598005, 0.7929338489620101, 0.7960828537233899, 0.7975094745482882, 0.8105125215239477, 0.8162115230788982, 0.8180440156261056, 0.8321093399976436, 0.8348519034915686, 0.8432206371360994, 0.8512232652701792, 0.860025147431349, 0.8663084273044674, 0.8710238308239043, 0.877088548421112, 0.8806314216918372, 0.8850590628183328, 0.8876496969491235, 0.892387993652593, 0.8971066222406746])
average_char_unigram_sim = list(np.mean(np.matrix(char_unigram_sim), axis=0).A1)

char_bigram_sim = []
char_bigram_sim.append([0.0, 0.0, 0.0, 0.0, 0.3013375274760782, 0.5522097205069343, 0.6364259905846315, 0.7435665396956544, 0.7681262006039427, 0.7803869190996756, 0.8030577290328852, 0.8137517304092661, 0.824145618605334, 0.8307897378944423, 0.8373959261609072, 0.8465077985790088, 0.8567281642972342, 0.860291529264634, 0.8659083051726981, 0.8720219846669404, 0.8772507827566134, 0.8806750748700333, 0.8873619636323591, 0.8907092978010629, 0.8955954555732175, 0.9005559999354382, 0.903117299338289, 0.906141767431458])
average_char_bigram_sim = list(np.mean(np.matrix(char_bigram_sim), axis=0).A1)

word_unigram_sim = []
word_unigram_sim.append([0.0, 0.0, 0.0, 0.0, 0.029234209974951703, 0.1443012790310494, 0.21093901863397652, 0.2710581359612952, 0.3238181973314972, 0.3395624050445677, 0.3799912637979062, 0.3990307961895736, 0.4127533598037137, 0.4377293547890685, 0.44368700924027527, 0.46417499372212995, 0.4836553941199441, 0.49603861969553986, 0.5119120167782885, 0.5150851595806858, 0.5204194776254921, 0.5286948669113747, 0.5401335214371052, 0.5472706536977572, 0.5493751913542344, 0.5529925247972459, 0.5538614452426824, 0.5577187412814919])
average_word_unigram_sim = list(np.mean(np.matrix(word_unigram_sim), axis=0).A1)

metadata_sim = []
metadata_sim.append([0.0, 0.0, 0.0, 0.0, 0.24976955733563333, 0.4967271008673439, 0.5937318870895656, 0.7037294337372246, 0.7369213064356505, 0.7526716624310102, 0.7601880284189925, 0.7781571167164343, 0.7954399306314219, 0.8103041325851941, 0.8263340686758273, 0.8312914735134745, 0.8482281429008767, 0.8573832453306034, 0.8647563638801987, 0.8727470967588934, 0.8795746818979675, 0.8845788178329593, 0.8905556149679906, 0.8965191677270763, 0.9012687770152192, 0.9044478323036955, 0.9062776590463709, 0.9078811796462158])
average_metadata_sim = list(np.mean(np.matrix(metadata_sim), axis=0).A1)

metadata_char_unigrams_sim = []
metadata_char_unigrams_sim.append([0.0, 0.0, 0.0, 0.0, 0.3009828033510852, 0.5261875013216127, 0.6574735566846837, 0.7838476062023378, 0.7889281216279175, 0.7966459938487097, 0.8155764784363694, 0.8340225045292667, 0.8467671035322368, 0.861908390684745, 0.87429555337602, 0.8814245695785825, 0.8880835123925991, 0.8926581255143615, 0.8976074732499342, 0.9024917129518293, 0.9081079570444335, 0.9118599009653838, 0.9173633562596045, 0.9202480039563478, 0.9232285636775994, 0.9243026199361546, 0.9281721415287523, 0.9329826853990767])
average_metadata_char_unigrams_sim = list(np.mean(np.matrix(metadata_char_unigrams_sim), axis=0).A1)

print len(average_char_bigram_sim)

metadata_error_corr = []
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3019844693701467, 0.5608355091383812, 0.6884246188594014, 0.8007604562737642, 0.8103328365623447, 0.8063880535103184, 0.8279372836489514, 0.8279995936198313, 0.8447488584474886, 0.8648860958366066, 0.8708337554452438, 0.8705007038005228, 0.8737152742444287, 0.876503856041131, 0.8771496241375759, 0.8811954119751657, 0.8847365106025614, 0.9036792062835882, 0.9088274862879022, 0.9103890728476821, 0.9152266720878228, 0.9193790686029043, 0.9240506329113923, 0.9323793207699285, 0.932206799436733, 0.9321093513568042, 0.9335478033577964][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5646071100616555, 0.6914311759343665, 0.8014504116032929, 0.8124271844660194, 0.8220955376449773, 0.8338853758907959, 0.8527513064863204, 0.8523642370431551, 0.8528714300443344, 0.8660500883300426, 0.8775933609958507, 0.892452252068226, 0.8946996466431096, 0.9003992015968064, 0.9019451371571071, 0.9129308627216577, 0.9166003184713376, 0.9167081301622052, 0.9159287633071336, 0.9179936305732483, 0.9225521669341894, 0.9205435968653903, 0.9201277955271565, 0.9227853152434158, 0.9270907068459906, 0.925052673823618][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3019844693701467, 0.5505009477389655, 0.6868522184697798, 0.8008934917250481, 0.8109025559105432, 0.8384832829710498, 0.8548179021534187, 0.8550753370340999, 0.8351306511820822, 0.8534419722135171, 0.8802510375544084, 0.8966144517433047, 0.8986608035178894, 0.9016990291262137, 0.9131223543640394, 0.9162033761245325, 0.9212145667305559, 0.9201297384958443, 0.9146428937391126, 0.9085811555021528, 0.9140578265204388, 0.9155954160438465, 0.9148151838198665, 0.9167990468625894, 0.9167990468625894, 0.9161379857256146, 0.9235217868182272][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5379105284497905, 0.6896713065855655, 0.7978075517661389, 0.8253223915592027, 0.8152606543054073, 0.8210587438304462, 0.8215735549971004, 0.8248273215656179, 0.8438202247191011, 0.8594564408041697, 0.8730325288562434, 0.884686257395015, 0.8912872841444269, 0.8883418668767231, 0.8896103896103896, 0.8899822869513875, 0.8958990536277603, 0.8991553882161392, 0.9091092912748964, 0.9116100323624594, 0.9108370400323493, 0.9093844601412715, 0.9141184781511758, 0.9147085291470852, 0.9148170365926814, 0.9167165967645297][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.30286305622628495, 0.5409967845659164, 0.6872330327479829, 0.8082327330298832, 0.811990171990172, 0.8245981830887491, 0.8217870986979425, 0.8351042896497443, 0.8492235109101631, 0.8626724315421042, 0.869324018902815, 0.8781230956733699, 0.8840417977072131, 0.8891135146062873, 0.8922702373706634, 0.9005859769650435, 0.9097494717778449, 0.9171147407933448, 0.9213573658241869, 0.9214659685863874, 0.9256878891343643, 0.9307545846277182, 0.9316782722777273, 0.9350544574425173, 0.9396394571602187, 0.9394643759474482, 0.9401033748859835][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5315520181921546, 0.6747519294377068, 0.7894790917497175, 0.7993243956507969, 0.8178868383694989, 0.8257166597424179, 0.8392857142857143, 0.8398879319290234, 0.8344666383340418, 0.8478950708694734, 0.8655936454849498, 0.8762201453790239, 0.8801571709233792, 0.8822445218103625, 0.8976810414971522, 0.8991366175723718, 0.8993602112318473, 0.9065984654731458, 0.9109113199836535, 0.9177843759598648, 0.9157786885245902, 0.9254157739006224, 0.9257491112239717, 0.9296205630354957, 0.9354970402122883, 0.9362395599918517][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.30169140490162233, 0.5498348017621145, 0.6870351298775603, 0.7913225196536969, 0.8139783899542491, 0.8025410269984118, 0.8100328077045189, 0.8198984771573603, 0.8361156351791532, 0.8365189101260675, 0.8730221518987342, 0.8695476166379922, 0.8777721518987343, 0.8874747474747475, 0.9024414549078226, 0.903811614448214, 0.9125049940071913, 0.9133167082294263, 0.9160335865653739, 0.9169833966793359, 0.9232471582335782, 0.9279695024077046, 0.931378416118093, 0.9353401326864046, 0.9344311080249975, 0.937637858431923, 0.9383650303694114][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.4901197172941007, 0.6424197893705609, 0.773355676581483, 0.7836751956016071, 0.8255523342997102, 0.8414546203770475, 0.8509310308956621, 0.851528384279476, 0.8505250154416306, 0.8614568455417262, 0.8748734561652155, 0.8802667474992423, 0.8905811623246493, 0.8923076923076924, 0.9016734330131697, 0.9056941269999007, 0.907015976977275, 0.9071059944422388, 0.9061264822134387, 0.9063276050461906, 0.9097429766885834, 0.9125693893735131, 0.9180715764566696, 0.91965510484029, 0.9251352680767339, 0.9265503302770384][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.30257029498016214, 0.5340599455040871, 0.6685768863419292, 0.7960158552698444, 0.7948853429145092, 0.8272261821102298, 0.8302077031659608, 0.8313627878033603, 0.8667203543386349, 0.8667404203962586, 0.8818757419865453, 0.8810121498142384, 0.8926620990964155, 0.898949070331447, 0.8953830542871638, 0.8994741100323623, 0.910329626289951, 0.9152678661171978, 0.9166833969082514, 0.9045816733067729, 0.9111531190926275, 0.9152306006574361, 0.9137589214908803, 0.9161718828620307, 0.9166164356037774, 0.917831640349995, 0.9178538951197334][0:28])
metadata_error_corr.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5306180983794637, 0.6813725490196079, 0.799419207633271, 0.8186867684983138, 0.8453897862947728, 0.8216090985678179, 0.8789808917197452, 0.8678813118167622, 0.8802979965770664, 0.8808613403099216, 0.8802288871349644, 0.8808174828004857, 0.8835471164528835, 0.8955883830770777, 0.8954714328747867, 0.8986179763946333, 0.901761719916393, 0.9021216973578863, 0.9059316956261235, 0.9109070729492482, 0.9159029106657267, 0.9222850222042794, 0.9238373852516898, 0.9305486159688218, 0.9330518697225572, 0.9376132018514792][0:28])

average_metadata_error_corr = list(np.mean(np.matrix(metadata_error_corr), axis=0).A1)



ranges = [labels_all,
		  #labels_all,
          #labels_all,
          #labels_all,
          #labels_all,
		labels_all
		  ]
list = [average_metadata_char_unigrams_sim,
#average_char_unigram_sim,
#average_char_bigram_sim,
#average_metadata_sim,
#average_word_unigram_sim,
		average_metadata_error_corr

		]
names = [
		 "Metadata + char unigrams",
		 #"Char unigrams",
		 #"Char bigrams",
		 #"Metadata",
		 #"Word unigrams",
		 "Metadata + char unigrams + error correlation"
		 ]


plot_list(ranges, list, names, "Flights", x_max=200, end_of_round=56)
plot_list_latex(ranges, list, names, "Flights", x_max=200)
plot_integral(ranges, list, names, "Flights", x_max=200,x_min=56, sorted=True)
#plot_end(ranges, list, names, "Flights", x_max=200,x_min=56, sorted=True)
#plot_outperform(ranges, list, names, "Flights", 0.7366, x_max=200)

#plot_outperform(ranges, list, names, "Flights", 0.9, x_max=200)