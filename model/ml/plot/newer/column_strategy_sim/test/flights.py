import numpy as np
import matplotlib.pyplot as plt

maxuncertainty_sim = []
maxuncertainty_sim.append([0.0, 0.0, 0.0, 0.0, 0.30098280335108518, 0.52618750132161274, 0.65747355668468366, 0.78384760620233784, 0.78892812162791748, 0.79664599384870971, 0.81557647843636938, 0.83402250452926674, 0.84676710353223683, 0.86190839068474501, 0.87429555337602005, 0.88142456957858251, 0.88808351239259908])
average_maxuncertainty_sim = np.mean(np.matrix(maxuncertainty_sim), axis=0).A1

real_sim = []
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.30169140490162233, 0.5158538319351629, 0.6731488406881078, 0.7804338202744576, 0.8005707386675447, 0.8223084180731732, 0.7980017376194614, 0.7991356023770934, 0.7862501399619304, 0.7998687664041995, 0.8245652173913044, 0.8628607541605225, 0.8805240719559113, 0.8833266047638272, 0.8919379068602904, 0.8902890289028902, 0.8917326833231769, 0.8980086930152633, 0.9035812672176309, 0.9086081895231286, 0.9111929609167178, 0.9177675371223758, 0.9256756756756757, 0.9326233872619292, 0.9360090099314017, 0.9370514660652041, 0.9406112644383113])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5423728813559322, 0.6777606085819565, 0.7862626262626263, 0.7982691118895529, 0.8099869648049732, 0.8080435005642762, 0.8149281125726523, 0.815478615071283, 0.8454007750356924, 0.8490507952796306, 0.8665013432527381, 0.8718324607329843, 0.8812428318214993, 0.8935373087730253, 0.901615575807788, 0.9016290726817043, 0.9019607843137254, 0.9060115002613696, 0.9161516275236918, 0.9235852953325072, 0.9279966989890654, 0.9271564176640528, 0.9305684514598164, 0.9330578512396694, 0.9346425283829395, 0.936209364138213])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5377602394883657, 0.6061493411420206, 0.7391028353787558, 0.7419423240033928, 0.7947958536069388, 0.8160791839208161, 0.8254612189703469, 0.8632414053645637, 0.8636921045184418, 0.8773089636398989, 0.8808820633983067, 0.884141494435612, 0.8892008422741402, 0.8962547566593231, 0.9063128266988338, 0.9127801332525741, 0.9159613059250303, 0.9195863869089449, 0.9206445115810674, 0.9240583232077765, 0.9252919855014097, 0.9287365564378329, 0.9302792847096645, 0.9319434699809562, 0.93338691851703, 0.9396889111891621])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5259980792975717, 0.6616594296444079, 0.7913212567802681, 0.7840279801807054, 0.7866931479642503, 0.8040082522841143, 0.8363106796116505, 0.8404234463830621, 0.8651502843216898, 0.8737864077669902, 0.8742551257448742, 0.8807412573478131, 0.891434262948207, 0.8958189867191344, 0.8952213082647866, 0.9065172515482159, 0.911084529505582, 0.9109895574341124, 0.9156554605132285, 0.9253494597006048, 0.9271247021445591, 0.9316470942487202, 0.9347563431333064, 0.9377971073126328, 0.9466235341690254, 0.9485138539042821])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3022774327122153, 0.5685937293292764, 0.6678644148999879, 0.788301415487094, 0.8145153138582836, 0.851851851851852, 0.8531828531828531, 0.8446661237785016, 0.8448240797234086, 0.8582367758186398, 0.8649565824932628, 0.868937875751503, 0.8703940257443253, 0.8831143167671179, 0.8857282981853849, 0.8855385836143622, 0.8955223880597015, 0.8926207645954757, 0.9020835371221755, 0.9118947058245752, 0.9176889592402058, 0.9163701067615659, 0.9170779861796644, 0.918016594231529, 0.9228480761602539, 0.9256313382382184, 0.9342905573835877])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.30286305622628495, 0.5532150776053215, 0.69932918064207, 0.8032013133593269, 0.8323757685717166, 0.8376168224299065, 0.8124428179322964, 0.8532538499751613, 0.8531718455276482, 0.8639379401857711, 0.8752879895822898, 0.8866324921135647, 0.8878513956491507, 0.8895082619948237, 0.8959888523937494, 0.9018710191082803, 0.9114990969295605, 0.9168598206187644, 0.9257235377453956, 0.9254996971532404, 0.9274951966831834, 0.9296512799838743, 0.9327417565796107, 0.9354903135610145, 0.9344604674291397, 0.9399060093990601, 0.9433811003106524])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5493398666122227, 0.5989471165350563, 0.7303292549487714, 0.7484976849571471, 0.77979086861994, 0.7927517361111112, 0.8084742135673015, 0.8819738167170191, 0.8825364871665828, 0.8805592138587781, 0.8855147282113575, 0.8950399030205072, 0.8947260834014719, 0.8908468954078989, 0.898390131716496, 0.9037840091733556, 0.9098121085594989, 0.9101985085600253, 0.9195498124218424, 0.926459910797635, 0.9280314797556178, 0.9308593345081373, 0.9322981366459627, 0.9365863701873584, 0.9373904074265085, 0.9407407407407408])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.30257029498016214, 0.5668952534624176, 0.6690001166725003, 0.7920931165964279, 0.766450515573509, 0.8117436598968747, 0.8234580384226492, 0.8513446951039306, 0.8618516723218614, 0.8615444239899235, 0.8674815677143966, 0.8672343719760016, 0.8880604336309232, 0.8861611562066917, 0.8917082917082918, 0.8932601098352473, 0.902429389689907, 0.9075829383886255, 0.909733817896081, 0.9136283875999219, 0.9188600831189391, 0.9196499602227525, 0.9292159614998998, 0.9315317132197237, 0.9372797744890768, 0.9373498799039232, 0.9376])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3011258611997984, 0.5457498646453708, 0.6820578928864409, 0.8079589990955683, 0.8208502024291499, 0.8245632172025226, 0.820278456796684, 0.831770778468345, 0.8473785620119663, 0.851103706788838, 0.8480735094497233, 0.8611541240838236, 0.8639533673363174, 0.8753538106719783, 0.8840381991814461, 0.9074169856211856, 0.908977943460702, 0.9143989156500887, 0.918580375782881, 0.9221345514950167, 0.9230290456431536, 0.9314532729518319, 0.933675564681725, 0.9358436508748592, 0.9361396303901438, 0.9379296193700626, 0.9402006962932622])
real_sim.append([0.0, 0.0, 0.0, 0.0, 0.3013982392542724, 0.5121610287950797, 0.5679455921981266, 0.7207522414170129, 0.7343371591028746, 0.8086912582112178, 0.8486823191183517, 0.8602358399381403, 0.8607008398494064, 0.8765974440894568, 0.8738738738738739, 0.8694685795110123, 0.8736599539124337, 0.8918169209431345, 0.8978940013973451, 0.9044293695131683, 0.9085305229667926, 0.9137266528313074, 0.915250888976689, 0.918552036199095, 0.9207561955137623, 0.9257556490267045, 0.9307555730913395, 0.9313249430185314, 0.9360984322286167, 0.9375747905863582, 0.9407422186751797])

average_real_sim = np.mean(np.matrix(real_sim), axis=0)[:,0:17].A1

print average_real_sim - average_maxuncertainty_sim

fig = plt.figure()
ax = plt.subplot(111)

ax.plot(range(17), average_real_sim, label='real')
ax.plot(range(17), average_maxuncertainty_sim, label='sim')
ax.legend(loc=4)



ax.set_ylabel('F1-score')
ax.set_ylim((0.0, 1.0))
plt.show()