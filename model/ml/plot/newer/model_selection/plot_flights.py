import matplotlib.pyplot as plt
import numpy as np

from ml.plot.old.potential_latex.plotlatex_lib import plot_list_latex


def plot_list(ranges, list_series, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    for i in range(len(list_series)):
        ax.plot(ranges[i], list_series[i], label=list_names[i])

    ax.set_ylabel('fscore')
    ax.set_xlabel('labels')

    ax.legend(loc=4)

    plt.show()



label_potential = [4, 8, 12, 16, 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 246, 256, 266, 276, 286]

fscore_metadata_no_svd_absolute_potential = []
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30257029498016214, 0.51009957325746791, 0.65832531280077, 0.78654824867777673, 0.81651549508692367, 0.8303065807459481, 0.84278801606094922, 0.84283069327298898, 0.85875012785107918, 0.84568221968201185, 0.86688511161171411, 0.87603139464681012, 0.8748236242693006, 0.88662041625371657, 0.8912142152023691, 0.88906311250490011, 0.89362545851095476, 0.896097513024673, 0.90286953949314652, 0.91048186785891705, 0.91118056255670932, 0.91922455573505646, 0.92562986947283221, 0.93261945651075862, 0.93468853778806471, 0.94117647058823528, 0.94639999999999991])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.29274084124830391, 0.54129571291603895, 0.68159203980099503, 0.7947661240469811, 0.80162958320275779, 0.82753500212134079, 0.83166291675189208, 0.83218534752661244, 0.86115851822106204, 0.8646123260437375, 0.86871673565937313, 0.87662910338069577, 0.8809594023395263, 0.88582330496037565, 0.89249096767893754, 0.89981282632252979, 0.90447234209493921, 0.90822878593302381, 0.91340754605457597, 0.91459074733096091, 0.91646118946641686, 0.90965669544268213, 0.91497487437185931, 0.92323273242860027, 0.9250075903248659, 0.93063757381643486, 0.93175431553592936])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30139823925427239, 0.5021373610715304, 0.65031878371750851, 0.78150021070375064, 0.80094884488448848, 0.83580922595777951, 0.83631039531478768, 0.84550616800469947, 0.8550278792539896, 0.85014634146341472, 0.86112995445295082, 0.85755926933540616, 0.87508453289537236, 0.87468428210608118, 0.87586753916319648, 0.88460015835312755, 0.88510553564317018, 0.89041231992051673, 0.89673643487749233, 0.89794703957155608, 0.90212088021507519, 0.90809519068007571, 0.91132414619532665, 0.91359504545000503, 0.91750824917508245, 0.91995197118270977, 0.92340042054671068])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30139823925427239, 0.56022635408245758, 0.68972845336481703, 0.81684044855400362, 0.82383048418466576, 0.82875737238153346, 0.84386884571898446, 0.85468157112091059, 0.8637721569408483, 0.86784228254408569, 0.86830909270802414, 0.87416023262809572, 0.88034101288947531, 0.89219929542023158, 0.90444578555622612, 0.90211826121875305, 0.90808416389811741, 0.91134185303514381, 0.91545653471255228, 0.92048960095531895, 0.92490276254113901, 0.9292044209897441, 0.93399701343952213, 0.93365259902224873, 0.93430365865815967, 0.93880389429763567, 0.9436591678279912])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30257029498016214, 0.49273694807996543, 0.63855421686746994, 0.79033257591406714, 0.77163030877858585, 0.77019315188762061, 0.770310272996382, 0.78310855626796383, 0.78870030755211296, 0.81864235055724421, 0.8376125375125042, 0.85922224636106881, 0.88159560996200925, 0.89028607356177303, 0.90607962143812359, 0.90493282740231773, 0.90484482228823104, 0.90696721311475403, 0.90840703466504014, 0.91331582137805623, 0.91403544510083523, 0.92134603689438477, 0.92967409948542024, 0.93084944821302018, 0.93281680089713515, 0.93764669864271866, 0.94009779951100236])

average_metadata_no_svd_absolute_potential = list(np.mean(np.matrix(fscore_metadata_no_svd_absolute_potential), axis=0).A1)


fscore_linear_svm = []
fscore_linear_svm.append([0.041762628588975892, 0.23606736957414759, 0.40716049382716046, 0.45187227199632435, 0.47668259914739691, 0.55850880220918198, 0.56961602671118539, 0.59582198001816533, 0.7673776107857222, 0.76855123674911663, 0.79842737222399318, 0.78336450654637479, 0.77463848720800899, 0.79288271671910604, 0.80436190887497305, 0.80404084292852473, 0.81050903119868634, 0.81572164948453618, 0.82931412464766685, 0.8363711681855841, 0.83797287651677377, 0.85097147581645305, 0.85678961467133741, 0.86759193597406548, 0.86645550219679168, 0.87167270844122213, 0.86991534173033247, 0.87088450820518115, 0.87272348839629521, 0.83020090732339602, 0.85813732728615122])
fscore_linear_svm.append([0.21932681867535289, 0.3230534351145038, 0.49781540141998903, 0.57283694383188477, 0.6170667336936031, 0.61602840476794318, 0.62474798387096786, 0.69847132451010574, 0.80393110830008752, 0.81175002399923213, 0.81360153256704992, 0.82131601566230539, 0.82171141587792162, 0.82507232401157182, 0.8188878533706121, 0.82679807087439716, 0.83620510691301642, 0.84091143416847092, 0.84489255525002549, 0.8471642398941045, 0.8498139020219293, 0.85287889482706458, 0.84931506849315075, 0.85737621235324146, 0.86653102746693789, 0.87081436519979771, 0.87018174555622141, 0.87256371814092948, 0.87563884156729133, 0.88143760666599746, 0.87937978252114379])
fscore_linear_svm.append([0.27604166666666669, 0.28585841600807133, 0.48029720047764357, 0.56216961618018846, 0.57526080476900165, 0.72920219821868482, 0.76454572955530897, 0.73507424475166394, 0.70699831365935928, 0.77192982456140358, 0.77190748992149361, 0.80743071769363517, 0.81234618539786707, 0.82137805617296422, 0.82917581321093592, 0.83728552149604774, 0.84533877709730743, 0.85366325149816347, 0.85406237966884857, 0.85447185813415583, 0.8598763045999227, 0.86912495223538411, 0.87529457973291436, 0.87686567164179097, 0.87831313429894564, 0.87853971386285146, 0.87910996324625024, 0.88577393379063529, 0.8858420268256334, 0.88566827697262474, 0.88508309687880016])
fscore_linear_svm.append([0.25372168284789642, 0.35142857142857142, 0.34645669291338582, 0.43804403481822834, 0.48023662274805057, 0.63468545057080406, 0.70663142719846228, 0.73958790004384045, 0.74176452249818137, 0.74390498020420914, 0.75373836662135307, 0.79227346278317146, 0.83187579836887093, 0.8381195908733281, 0.84308158243422293, 0.85332011892963333, 0.85705602269273629, 0.87200811359026376, 0.86940713059286945, 0.87316287497483391, 0.87175341081354207, 0.87342543681430329, 0.88201957753735194, 0.88374485596707819, 0.88998763906056855, 0.89225031081641104, 0.89537121442317424, 0.89675636958968585, 0.89767489501177911, 0.90033801085731846, 0.90335224342444553])
fscore_linear_svm.append([0.27481713688610238, 0.38912198912198909, 0.40083507306889354, 0.40813030017498991, 0.40628811492072098, 0.51746379457222824, 0.65802932151380844, 0.65294771968854282, 0.69201830198271475, 0.7025726835390087, 0.77012648062638034, 0.77561765897124335, 0.77561765897124335, 0.79988443759630201, 0.80857142857142861, 0.8049387442572743, 0.8049387442572743, 0.81372743503273171, 0.81491105336797909, 0.81604010025062657, 0.83493225200276922, 0.83538767395626234, 0.838325769036813, 0.84174265450861208, 0.84618457850579309, 0.8476636445152933, 0.84957178841309822, 0.84970748436554366, 0.85342479572278829, 0.85293227011204198, 0.85532044142958386])

average_linear_svm = list(np.mean(np.matrix(fscore_linear_svm), axis=0).A1)


fscore_naive_bayes = []
fscore_naive_bayes.append([0.27041680786174177, 0.27100271002710025, 0.4695834581959844, 0.47050014974543281, 0.38483685220729369, 0.38870272857826715, 0.29244813278008303, 0.29409814323607425, 0.27608401084010842, 0.30877427997320828, 0.37697186534395838, 0.36966824644549767, 0.3991657307877427, 0.3982174120643005, 0.51592539454806308, 0.51447990543735223, 0.52704089110362018, 0.54020499494730767, 0.54634006589313844, 0.55129503689769932, 0.55169417897480455, 0.55206372194062281, 0.55085482468849611, 0.55557157272596225, 0.55781137508999279, 0.56061687848065112, 0.56480022912788197, 0.56496203982237503, 0.56187194946884866, 0.56557846506300113, 0.56787297954512939])
fscore_naive_bayes.append([0.2680159460288255, 0.26854690374003676, 0.26895389799356717, 0.36825396825396822, 0.23658454269321635, 0.23951490651844365, 0.24200605856613938, 0.30297368830764437, 0.43293455313159751, 0.43933342514805118, 0.47275149900066632, 0.47535538727248572, 0.481666892166148, 0.49779492833517097, 0.5036386104627214, 0.50411635565312851, 0.50868965517241371, 0.50000000000000011, 0.512907321201862, 0.51857122527394339, 0.51141421392677666, 0.50801907238838329, 0.51818052188792241, 0.51998857795545406, 0.51023622047244088, 0.52509652509652516, 0.53568884456475285, 0.53723252496433671, 0.53388032253501205, 0.53604436229205166, 0.54071100917431192])
fscore_naive_bayes.append([0.2733812949640288, 0.4172728679770934, 0.55907852365618049, 0.55961371796459081, 0.54483965014577262, 0.5644017387325555, 0.56819564423895852, 0.5688921318253678, 0.51968077911537947, 0.51968077911537947, 0.56265324558007479, 0.56225425950196584, 0.57592303692147684, 0.58581176773529042, 0.62542351612498426, 0.63105835806132538, 0.63773584905660374, 0.63773584905660374, 0.65785206436322829, 0.65919003115264796, 0.66848364717542119, 0.67406859116703677, 0.67217296246811609, 0.67410551849605826, 0.67620795107033638, 0.68026041026900863, 0.68251439774537426, 0.68572129538763493, 0.69133992915597897, 0.70622009569377997, 0.70764438054157675])
fscore_naive_bayes.append([0.2742638090259627, 0.54213036565977735, 0.67763236883179256, 0.6779498259512664, 0.65726548129981599, 0.66258869586493752, 0.61194779116465858, 0.61524978089395266, 0.54891591750396618, 0.56073298429319363, 0.54387630543876309, 0.56922257720979763, 0.5822923816060398, 0.58552631578947367, 0.58414350267013548, 0.58730158730158732, 0.59003935405075325, 0.58350374914792091, 0.59240092605202233, 0.60116389227229672, 0.60428532682397618, 0.61116341627437798, 0.62904938927243759, 0.66485647788983715, 0.61061826122560392, 0.63878123747160231, 0.64307407896474311, 0.67242045600927469, 0.67517401392111376, 0.6776796004610065, 0.6788779300627642])
fscore_naive_bayes.append([0.27618715083798884, 0.27708951317396613, 0.46755340588472394, 0.52457757296466978, 0.50684405782269426, 0.50894225855901887, 0.50712974728222504, 0.51455213337100869, 0.44898563601362351, 0.47178296822863774, 0.4657130216782186, 0.46493812610489099, 0.47731928592332445, 0.49623406720741603, 0.49725671383193759, 0.49682264586943964, 0.48650226178316069, 0.50356363636363632, 0.50991173491535235, 0.51191679907554533, 0.52735889702714345, 0.52989247311827958, 0.53698161607524575, 0.54007117437722429, 0.55528947739118195, 0.56101694915254241, 0.56556797283915694, 0.57183138305371495, 0.57332205301748451, 0.57251693002257342, 0.57271829595147405])

average_naive_bayes = list(np.mean(np.matrix(fscore_naive_bayes), axis=0).A1)



ranges = [label_potential, label_potential, label_potential]
list = [average_metadata_no_svd_absolute_potential, average_linear_svm, average_naive_bayes]
names = ["XGBoost", "Linear SVM", "Naive Bayes"]


plot_list_latex(ranges, list, names, "Flights", x_max=200)
#plot_list(ranges, list, names)