import matplotlib.pyplot as plt
import numpy as np

def get_label(list_of_lists, labels):
    new_list = []
    min = -1
    for l in list_of_lists:
        if min == -1 or len(l) < min:
            min = len(l)

    for i in range(len(list_of_lists)):
        new_list.append(list_of_lists[i][0:min])

    return new_list, labels[0:min]

def plot_list(ranges, list_series, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    for i in range(len(list_series)):
        ax.plot(ranges[i], list_series[i], label=list_names[i])

    ax.set_ylabel('fscore')
    ax.set_xlabel('labels')

    ax.legend(loc=4)

    plt.show()


def plot_real_stats(ranges, list_all, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    print list_names

    for i in range(len(list_all)):
        mins = np.min(np.matrix(list_all[i]), axis=0).A1
        maxes = np.max(np.matrix(list_all[i]), axis=0).A1
        means = np.mean(np.matrix(list_all[i]), axis=0).A1
        std = np.std(np.matrix(list_all[i]), axis=0).A1

        print len(std)
        print len(means)
        print len(ranges[i])
        print list_names[i]

        # create stacked errorbars:
        ax.errorbar(ranges[i], means, std, label=list_names[i])
        ax.errorbar(ranges[i], means, [means - mins, maxes - means], fmt='.k', ecolor='gray', lw=1)

    ax.set_ylabel('fscore')
    ax.set_xlabel('labels')

    ax.legend(loc=4)

    plt.show()

fscore_train_08 = []
fscore_train_08.append([0.0, 0.0, 0.0, 0.0, 0.28403702867464437, 0.50197702880813411, 0.57643854273067752, 0.71237172177879149, 0.71237172177879149, 0.72709659562690276, 0.78302664103268327, 0.80609381264198854, 0.80720961281708947, 0.81532364597093787, 0.80730593607305934, 0.81589019400818275, 0.81635883905013196, 0.82990506329113911, 0.84855581576893035, 0.85011588977594643, 0.85011588977594643, 0.85460627895007713, 0.86922878514315194, 0.87483937291184788])
fscore_train_08.append([0.0, 0.0, 0.0, 0.0, 0.28403702867464437, 0.52141460813932816, 0.65607956368302855, 0.76775587361598696, 0.76775587361598696, 0.79037893039505502, 0.80652433364275278, 0.82540940306391963, 0.82540940306391963, 0.83944020356234095, 0.83343856547543871, 0.84401817264008072, 0.84401817264008072, 0.84366074754749776, 0.85284155062100109, 0.85614646904969494, 0.8571428571428571, 0.86297595190380749, 0.86516853932584259, 0.86899897854954034])
fscore_train_08.append([0.0, 0.0, 0.0, 0.0, 0.28403702867464437, 0.54227095861337105, 0.68041237113402075, 0.79155602761550725, 0.79155602761550725, 0.81246806336228927, 0.80984848484848482, 0.81142294436238316, 0.8124461935801256, 0.81013268998793719, 0.82242990654205617, 0.84882985452245419, 0.84926656550328783, 0.85593002315410338, 0.86823081800887758, 0.86600775678718867, 0.86614961220915687, 0.87762857866734234, 0.88608234402626929, 0.90187681068144609])
fscore_train_08.append([0.0, 0.0, 0.0, 0.0, 0.28403702867464437, 0.55482959562069578, 0.67898894154818323, 0.79270532668590921, 0.79270532668590921, 0.78072736925935748, 0.78644158628081451, 0.78602035350830213, 0.78715719063545153, 0.81463160635251242, 0.8234541031878122, 0.8425565081839439, 0.84315762139703976, 0.85166968677193888, 0.86438267614738196, 0.87317708333333344, 0.87317708333333344, 0.85864011528887729, 0.86330371144798745, 0.87418428608718346])
fscore_train_08.append([0.0, 0.0, 0.0, 0.0, 0.13441372735938989, 0.44850255661066468, 0.59216589861751157, 0.72950484244987035, 0.79989433364152684, 0.80715811965811968, 0.7959536802875018, 0.8031697341513292, 0.8031697341513292, 0.81021620938171701, 0.81346818589169123, 0.81653019447287611, 0.81698426908811861, 0.8297683837488925, 0.8554052376815191, 0.86421288236757021, 0.86421288236757021, 0.86146800661493439, 0.86313381624094543, 0.86913451511991646])

average_train_08 = list(np.mean(np.matrix(fscore_train_08), axis=0).A1)

fscore_test_02 = []
fscore_test_02.append([0.0, 0.0, 0.0, 0.0, 0.35897435897435898, 0.54074542008843962, 0.63683304647160066, 0.70709046454767732, 0.70709046454767732, 0.71748451643639832, 0.77978674084376443, 0.79817767653758542, 0.80145388459791012, 0.82374100719424448, 0.80375502905677254, 0.80818181818181811, 0.80872330758746014, 0.80401093892433906, 0.82848186296462167, 0.81978798586572443, 0.81978798586572443, 0.82743362831858402, 0.83942908117752002, 0.84533333333333338])
fscore_test_02.append([0.0, 0.0, 0.0, 0.0, 0.35897435897435898, 0.5726240286909744, 0.73389651531151001, 0.783710407239819, 0.783710407239819, 0.79550561797752806, 0.80499776885319063, 0.83116883116883111, 0.83116883116883111, 0.85540599218410762, 0.85269978401727864, 0.85318319618882621, 0.85318319618882621, 0.84731182795698923, 0.8529411764705882, 0.84908080376229156, 0.85202558635394454, 0.85543710021321961, 0.85884353741496589, 0.86057486057486055])
fscore_test_02.append([0.0, 0.0, 0.0, 0.0, 0.35897435897435898, 0.58865248226950351, 0.74428274428274432, 0.79788172992056494, 0.79788172992056494, 0.82841249465126232, 0.83953786906290129, 0.83709273182957389, 0.83999999999999997, 0.8419328419328419, 0.84653061224489801, 0.86686772942697121, 0.86735572782084402, 0.87077189939288813, 0.88092189500640194, 0.87127882599580708, 0.87127882599580708, 0.87728237791932073, 0.87993211709800601, 0.88954970263381472])
fscore_test_02.append([0.0, 0.0, 0.0, 0.0, 0.35777126099706741, 0.60426540284360186, 0.74736842105263146, 0.79343971631205679, 0.79397430217102349, 0.77430865298840312, 0.78558718861209953, 0.78299776286353473, 0.7862561356537261, 0.81385281385281383, 0.81646655231560883, 0.83807062876830307, 0.83857081360309949, 0.84595524956970736, 0.85519008970525423, 0.8631764188297405, 0.8631764188297405, 0.85410199556541022, 0.86283185840707965, 0.87510917030567681])
fscore_test_02.append([0.0, 0.0, 0.0, 0.0, 0.16693418940609953, 0.45959595959595961, 0.64150943396226423, 0.7142857142857143, 0.80624999999999991, 0.80856882406563357, 0.78913443830570895, 0.77922077922077915, 0.77922077922077915, 0.79007971656333031, 0.78984861976847731, 0.78999106344950842, 0.78264718902169106, 0.80087336244541474, 0.83020477815699667, 0.8350253807106599, 0.84107371112057938, 0.82897556793827687, 0.83404619332763053, 0.83807062876830307])

average_test_02 = list(np.mean(np.matrix(fscore_test_02), axis=0).A1)



fscore_0 = []
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.3022774327122153, 0.49671676637968776, 0.65743690271992161, 0.75257944696657042, 0.75283680627192073, 0.78949889815080954, 0.79103877838055048, 0.79462532299741595, 0.79586990191017037, 0.79917184265010344, 0.81055742382553764, 0.83308149491286387, 0.8330145948666331, 0.8419377300308365, 0.85089463220675954, 0.84464431725265743, 0.84507618365886072, 0.8459251665812404, 0.8491414554374489, 0.87017048320387369])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.29846100639806333, 0.50698602794411185, 0.65282201554338126, 0.76877339792997135, 0.77080356161371877, 0.79118253882071887, 0.79237104464672736, 0.79590737749057605, 0.7972027972027973, 0.81930693069306926, 0.82510096303199754, 0.82014853083629313, 0.819686223941543, 0.82251725969198086, 0.8320016820857864, 0.84796573875803005, 0.84891792568395263, 0.84415449932691322, 0.84934903905765646, 0.85723108594956254])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.30169140490162233, 0.54260338606716629, 0.68801780635587984, 0.78817226457861123, 0.78867147270854787, 0.779789301421704, 0.78847687400318978, 0.78198236938292842, 0.77548853016142738, 0.79768786127167635, 0.80979403110550652, 0.79982882208195138, 0.80834955656500107, 0.81518116331577262, 0.82387932865944347, 0.84141519250780439, 0.84153574029757572, 0.84974629802216006, 0.85770423991726996, 0.86868480261812231])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.29757785467128028, 0.53098071399261382, 0.66875527171948423, 0.77243655869610051, 0.77471169686985175, 0.76800858829844343, 0.78049823586015177, 0.76914539400665927, 0.77050997782705111, 0.80356581017304651, 0.81378438191590263, 0.83398170539375471, 0.83398170539375471, 0.84032904450537871, 0.85134993171551643, 0.86114469971785568, 0.86114469971785568, 0.87170227705888248, 0.87019854335029434, 0.8738848337388484])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.30169140490162233, 0.54760269267756556, 0.65843113032736245, 0.77013054830287198, 0.77062689058099509, 0.77226277372262764, 0.79710872402369237, 0.78118348233290757, 0.76559900166389339, 0.78348846620801282, 0.79302108214767897, 0.80519480519480513, 0.82020583910943079, 0.82535034511608452, 0.83696437790397527, 0.85085771947527744, 0.8539894694208181, 0.86012992285830281, 0.86458439312239288, 0.87733549959382606])

average_0 = list(np.mean(np.matrix(fscore_0), axis=0).A1)
label_0 = [4, 8, 12, 16, 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156, 166, 176, 186, 196, 206, 216]



#plot_real_stats([label_stop, label_stop_001_04, label_0],[new_list_001_04],[ "stop:change < 0.001, cert>0.4"])


ranges = [label_0, label_0, label_0]
list = [average_train_08, average_test_02, average_0]
names = ["training", "test", "all"]

list_real = [fscore_train_08, fscore_test_02, fscore_0]

plot_real_stats(ranges, list_real, names)

#plot_list(ranges, list, names)