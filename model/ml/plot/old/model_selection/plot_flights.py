import matplotlib.pyplot as plt
import numpy as np

from ml.plot.old.potential_latex.plotlatex_lib import plot_list_latex


def plot_list(ranges, list_series, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    for i in range(len(list_series)):
        ax.plot(ranges[i], list_series[i], label=list_names[i])

    ax.set_ylabel('fscore')
    ax.set_xlabel('labels')

    ax.legend(loc=4)

    plt.show()



label_potential = [4, 8, 12, 16, 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 246, 256, 266, 276, 286]

fscore_metadata_no_svd_absolute_potential = []
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30257029498016214, 0.56367828563678291, 0.69897659098929543, 0.81845732720696052, 0.82742636407532599, 0.82714023742881959, 0.84243676803464229, 0.84110191683251279, 0.8580651879620953, 0.8661815881050301, 0.87795234626989915, 0.88092794087456383, 0.88004136504653563, 0.8945514812512948, 0.90140551795939616, 0.89645861460172394, 0.90111030403652581, 0.90158135663753647, 0.9171555006689307, 0.91854134565998968, 0.92624215615677397, 0.93310147299508994, 0.93340163934426235, 0.93449334698055264, 0.93998172032090999, 0.94219417870954603, 0.9442755825734549])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30139823925427239, 0.53216052776250689, 0.67792521109770798, 0.78574265289912637, 0.80781250000000004, 0.80839433870180577, 0.83740591813589027, 0.83552562348731974, 0.84651261394954425, 0.83897391679241218, 0.85497470489038785, 0.85799573560767595, 0.88928496540155177, 0.89705730511099624, 0.89944249432170142, 0.90283359093250903, 0.90837965822524191, 0.91550451189499593, 0.91695786228160336, 0.92139425534089747, 0.92155057788687744, 0.92498727735368946, 0.92740619902120724, 0.9281272300948108, 0.93702464253118345, 0.93821649589124467, 0.94104492783085991])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30139823925427239, 0.49752229930624381, 0.63269325455440661, 0.76299034709385916, 0.76323348379154698, 0.74785855479903363, 0.7848408064338438, 0.79439861050803307, 0.82181818181818178, 0.85786494136676117, 0.86429081997345036, 0.8678897202008814, 0.87148553317656674, 0.8725339875293876, 0.88868388683886834, 0.89334850522395792, 0.89643221202854229, 0.90147225368063422, 0.90579561744828996, 0.91599678456591638, 0.92004845548152636, 0.91963746223564957, 0.92260185277418072, 0.92825067358547042, 0.93227810058104588, 0.93560415197017033, 0.94184995480566436])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30139823925427239, 0.57879139286174464, 0.70524412296564187, 0.81956352299298529, 0.81321725366046704, 0.82512733446519526, 0.82565330141631754, 0.84501441495178442, 0.82026313063296385, 0.83577202496674496, 0.84453482460599905, 0.84446700507614214, 0.84812339331619546, 0.88476426799007446, 0.89269294727575066, 0.89381311893322879, 0.89889196675900274, 0.90198793393333998, 0.90889263408347387, 0.90936136453788163, 0.91906367784169807, 0.92921745969327563, 0.93591535236574164, 0.93590255591054317, 0.93741864423750865, 0.94031644302022832, 0.94554207200882556])
fscore_metadata_no_svd_absolute_potential.append([0.0, 0.0, 0.0, 0.0, 0.30139823925427239, 0.49101624263331889, 0.61994076999012837, 0.73693015474696777, 0.77364463791056592, 0.79677038204017325, 0.81815406533021273, 0.81730476287194076, 0.82406105643703564, 0.84589357120885889, 0.84621676891615538, 0.84672725416113548, 0.85363151002316917, 0.87933785400877529, 0.88781470292044307, 0.89216571371250875, 0.89891041162227603, 0.89915881220229044, 0.90515840779853785, 0.91507237574653311, 0.91525080906148859, 0.91640617122113543, 0.92020683362060218, 0.93954148914587143, 0.9402162823913488, 0.94207627982867626, 0.94268415741675071])

average_metadata_no_svd_absolute_potential = list(np.mean(np.matrix(fscore_metadata_no_svd_absolute_potential), axis=0).A1)


fscore_linear_svm = []
fscore_linear_svm.append([0.27641427328111401, 0.51261978674584963, 0.49220406635898717, 0.56867095629021513, 0.58083766162006856, 0.46525381961557416, 0.57092687821397214, 0.50756992558378233, 0.67400089806915131, 0.77543478260869558, 0.83177763949388084, 0.85001496856601133, 0.8511148885111488, 0.85923366195751594, 0.85654135338345871, 0.86067617432931087, 0.85978336480174899, 0.86242051074997472, 0.86469704556835247, 0.86426256077795771, 0.86763658561399937, 0.86884912566083772, 0.87216053784251801, 0.87083030240049897, 0.87834673724931289, 0.87850276130087956, 0.88023527025656623, 0.88215010141987826, 0.88632888163931078, 0.88884327209278458, 0.89145780051150891])
fscore_linear_svm.append([0.27398701982108403, 0.36728599867285999, 0.37782448765107723, 0.45250947513494888, 0.46584699453551909, 0.59550561797752821, 0.74494175352544445, 0.76507075014537707, 0.75652615540883694, 0.69695265939502982, 0.7216340498342424, 0.76513026052104205, 0.77331205744489884, 0.80949270629218384, 0.8367690366007573, 0.84564589352042918, 0.8482498428002514, 0.84497726333195533, 0.8378209142141515, 0.83863565244602056, 0.84302872062663181, 0.85788319712975891, 0.85803842264914054, 0.85768767563227621, 0.86180171112229487, 0.86414298624359875, 0.86833449616266312, 0.8688556822650414, 0.87282946903543113, 0.87708375175738085, 0.87964637331725948])
fscore_linear_svm.append([0.25545571245186138, 0.32979776552114271, 0.34451746800415078, 0.47286897223575258, 0.47791289886706168, 0.57962413452027695, 0.73414477898782826, 0.64445587856959097, 0.64445587856959097, 0.72333811573409867, 0.72837596668649607, 0.73541223718403026, 0.76145303100416484, 0.76345576345576349, 0.79331762690083529, 0.79864599257479796, 0.79333186133804356, 0.79452961288187929, 0.79915947799159492, 0.81415737633943075, 0.81921700466326863, 0.82035799007979293, 0.82172701949860727, 0.83033636555955148, 0.83409307749390438, 0.83320851610142288, 0.83701097963969728, 0.84320117783152804, 0.84437919463087252, 0.84802527646129544, 0.84829982103379287])
fscore_linear_svm.append([0.27181440443213295, 0.38461538461538464, 0.38357588357588357, 0.49539015066336844, 0.50209299694535581, 0.52417472490830275, 0.69805007499711558, 0.6319603816886098, 0.62864534336782685, 0.64492665777670011, 0.63274446379696436, 0.64480335347059548, 0.64538395168248497, 0.63198894333458988, 0.65877712031558189, 0.65389286196194851, 0.64735583311187883, 0.64281828073993463, 0.65932885906040273, 0.76881594372801887, 0.77882270985719271, 0.79464988198269071, 0.79469603326216431, 0.79788669064748197, 0.80258179390162487, 0.80262859732608205, 0.8063903474472125, 0.81448444302856537, 0.84645950076413667, 0.84749948549084186, 0.86875253961804155])
fscore_linear_svm.append([0.030307716097108393, 0.20238095238095238, 0.22238442822384427, 0.36930742401594413, 0.55896503795573615, 0.64365424626442214, 0.66427252206033238, 0.63770853005980477, 0.70986249876347796, 0.72631578947368425, 0.77421765530126119, 0.7768875483080403, 0.80227335227793561, 0.8039215686274509, 0.81699033770209517, 0.8272736230170461, 0.83187062419879709, 0.84754724370899825, 0.84735506539137229, 0.84254390316499661, 0.84509018036072125, 0.85068859605667291, 0.85300535608014294, 0.85652811735941325, 0.8570591681312244, 0.85939476500924394, 0.86079656384224912, 0.85816519232680644, 0.85651080945198588, 0.86025984330060501, 0.86410256410256425])

average_linear_svm = list(np.mean(np.matrix(fscore_linear_svm), axis=0).A1)


fscore_naive_bayes = []
fscore_naive_bayes.append([0.25447064408925463, 0.3573023671281822, 0.52234927234927231, 0.66892971246006394, 0.59304608986946983, 0.56164383561643838, 0.51703056768558942, 0.25706760316066724, 0.26729395365046171, 0.27172966382163388, 0.24362606232294615, 0.37073637233025186, 0.53348597595878655, 0.55723905723905731, 0.55707051032333454, 0.5334846765039728, 0.58037922506183015, 0.58831596269884801, 0.61813778256189456, 0.74388254486133765, 0.7469928644240571, 0.74343516910186991, 0.74679520049225712, 0.74776716969510315, 0.74794745484400638, 0.74802422251873135, 0.77742129536795668, 0.77729870650757049, 0.77778891450335774, 0.7928821470245041, 0.7852687852687853])
fscore_naive_bayes.append([0.28468113083497698, 0.52876970758657871, 0.58174263082716537, 0.61903025884068541, 0.47586694975230009, 0.20425977653631283, 0.35966257668711654, 0.30153508771929821, 0.50678545529887076, 0.3362784471218207, 0.32177681473456116, 0.33041504539559019, 0.33715485225254316, 0.066417763804283741, 0.10633008223369669, 0.21649855907780982, 0.39765443883812895, 0.53031738512553295, 0.53027702868350091, 0.53045716386812114, 0.43725055432372506, 0.5126532741977563, 0.35234278668310731, 0.39139663223432858, 0.39459007250418293, 0.32400589101620036, 0.44784914555097233, 0.44043755259045564, 0.44059644059644054, 0.44730874806062781, 0.4096445438727318])
fscore_naive_bayes.append([0.21739130434782605, 0.53398058252427194, 0.64743011722272314, 0.65479238561727704, 0.60457334076965974, 0.59977765425236251, 0.54171335438525003, 0.53369050072120339, 0.49106904825379888, 0.49973516949152547, 0.48590381426202317, 0.46462026228563197, 0.46454980426272291, 0.4598805883209553, 0.46897546897546899, 0.44685529980941213, 0.47124945957630787, 0.55700766110860755, 0.55404486743711767, 0.55944690014734222, 0.47982646420824299, 0.49279538904899134, 0.51778376080487465, 0.5370680044593088, 0.68634840871021774, 0.68314044416640607, 0.69624432521667357, 0.68052219321148821, 0.68079774459642894, 0.68176126878130217, 0.68188003768449701])
fscore_naive_bayes.append([0.24065796531378508, 0.52891470821230524, 0.63050244553134738, 0.70231907237105162, 0.64225293996286359, 0.4623363153118113, 0.30201875695437924, 0.1033503691084611, 0.094267025779145822, 0.08137957760124008, 0.41422316571580203, 0.43190763579113095, 0.43231899265477441, 0.43697698744769881, 0.64425379090183565, 0.65107521553859882, 0.65797530864197529, 0.65797530864197529, 0.66522593320235757, 0.66522593320235757, 0.66607652208124324, 0.61769653470898278, 0.68254671035154513, 0.68254671035154513, 0.68277999114652499, 0.63510101010101006, 0.67976534127944865, 0.51007347712728135, 0.51244195737587805, 0.51491738975395218, 0.68243875070132787])
fscore_naive_bayes.append([0.25861779048259631, 0.45229485396383873, 0.58935820076796486, 0.64990987382335264, 0.65609228550829124, 0.71113581619418198, 0.62645168564663423, 0.58755957472809484, 0.60305619059078341, 0.59076315139540625, 0.61255779995132631, 0.64267530664198114, 0.61202185792349728, 0.61287897769982458, 0.6149155126413417, 0.61907177276185643, 0.61646507998439337, 0.45941384072425961, 0.46768860835587622, 0.450046685340803, 0.45199135535659152, 0.45380225204380692, 0.46361268576681475, 0.47214121258633923, 0.49029714978775019, 0.55380159304851562, 0.549833164079501, 0.55483123279733448, 0.56278669724770636, 0.56440483036227718, 0.6722159162567789])

average_naive_bayes = list(np.mean(np.matrix(fscore_naive_bayes), axis=0).A1)



ranges = [label_potential, label_potential, label_potential]
list = [average_metadata_no_svd_absolute_potential, average_linear_svm, average_naive_bayes]
names = ["XGBoost", "Linear SVM", "Naive Bayes"]


plot_list_latex(ranges, list, names, "Flights", x_max=200)
#plot_list(ranges, list, names)