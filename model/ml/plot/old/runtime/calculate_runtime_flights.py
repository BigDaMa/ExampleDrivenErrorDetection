import matplotlib.pyplot as plt
import numpy as np

from ml.datasets.flights import FlightHoloClean

data = FlightHoloClean()

number_dirty_columns = 4 - 1

init_labels = 4
std_labels = 10
sec_pro_label = 3.0

fscore_all = []


#distinct active learning, no stop criterion
fscore_0 = []
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.3022774327122153, 0.49671676637968776, 0.65743690271992161, 0.75257944696657042, 0.75283680627192073, 0.78949889815080954, 0.79103877838055048, 0.79462532299741595, 0.79586990191017037, 0.79917184265010344, 0.81055742382553764, 0.83308149491286387, 0.8330145948666331, 0.8419377300308365, 0.85089463220675954, 0.84464431725265743, 0.84507618365886072, 0.8459251665812404, 0.8491414554374489, 0.87017048320387369])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.29846100639806333, 0.50698602794411185, 0.65282201554338126, 0.76877339792997135, 0.77080356161371877, 0.79118253882071887, 0.79237104464672736, 0.79590737749057605, 0.7972027972027973, 0.81930693069306926, 0.82510096303199754, 0.82014853083629313, 0.819686223941543, 0.82251725969198086, 0.8320016820857864, 0.84796573875803005, 0.84891792568395263, 0.84415449932691322, 0.84934903905765646, 0.85723108594956254])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.30169140490162233, 0.54260338606716629, 0.68801780635587984, 0.78817226457861123, 0.78867147270854787, 0.779789301421704, 0.78847687400318978, 0.78198236938292842, 0.77548853016142738, 0.79768786127167635, 0.80979403110550652, 0.79982882208195138, 0.80834955656500107, 0.81518116331577262, 0.82387932865944347, 0.84141519250780439, 0.84153574029757572, 0.84974629802216006, 0.85770423991726996, 0.86868480261812231])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.29757785467128028, 0.53098071399261382, 0.66875527171948423, 0.77243655869610051, 0.77471169686985175, 0.76800858829844343, 0.78049823586015177, 0.76914539400665927, 0.77050997782705111, 0.80356581017304651, 0.81378438191590263, 0.83398170539375471, 0.83398170539375471, 0.84032904450537871, 0.85134993171551643, 0.86114469971785568, 0.86114469971785568, 0.87170227705888248, 0.87019854335029434, 0.8738848337388484])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.30169140490162233, 0.54760269267756556, 0.65843113032736245, 0.77013054830287198, 0.77062689058099509, 0.77226277372262764, 0.79710872402369237, 0.78118348233290757, 0.76559900166389339, 0.78348846620801282, 0.79302108214767897, 0.80519480519480513, 0.82020583910943079, 0.82535034511608452, 0.83696437790397527, 0.85085771947527744, 0.8539894694208181, 0.86012992285830281, 0.86458439312239288, 0.87733549959382606])

matrix = np.matrix(fscore_0)

'''
for i in range(1,len(save_time)):
    print str(i) + ": " + str(save_time[i]-save_time[i-1])
'''

time = 100 #save_time[9]

approx_time = []

average = list(np.mean(matrix, axis=0).A1)

print average

for i in range(number_dirty_columns, len(average)):
    print "time: " + str(time / 60) + " fscore: " + str(average[i])
    approx_time.append(time)
    time = time + (std_labels * sec_pro_label)

def plot_list(y_series, list_series, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    for i in range(len(list_series)):
        ax.plot(np.array(y_series[i]) / 60.0, list_series[i], label=list_names[i])

    ax.set_ylabel('F-score')
    ax.set_xlabel('Runtime in minutes')

    ax.legend(loc=4)

    plt.show()

print len(approx_time)

runtime_dboost = (13 / 60.0)
label_cost_10_rows = (data.shape[1] * 10 * sec_pro_label / 60.0)
time_dboost = runtime_dboost + label_cost_10_rows

dboost_fscore = [0, 0, 0.53697, 0.53697]
dboost_time = [0, (time_dboost-0.001)*60, time_dboost*60, 12*60]

nadeef_time = [0, 4.131230115890503, 8.15492296218872, 12.170973062515259, 15.007189989089966, 19.23830008506775, 23.342206954956055, 27.4391131401062, 31.552951097488403, 35.75769400596619, 40.02531099319458, 44.19737696647644, 48.239262104034424, 114.17071008682251, 185.6634440422058, 12*60]
nadeef_fscore = [0.0, 0.054470100651272946, 0.0625, 0.069072564998059763, 0.069072564998059763, 0.14139568871026673, 0.15067004708438972, 0.15215431764917972, 0.15216221065853222, 0.16863644381725171, 0.16951541850220264, 0.22939189189189191, 0.22939189189189191, 0.29721362229102172, 0.42498949432693661, 0.42498949432693661]

openrefine_fscore = [0.0, 0.0, 0.7366, 0.7366]
openrefine_time = [0, (3-0.001)*60,  3*60, 12*60]

plot_list([approx_time,dboost_time, nadeef_time, openrefine_time],
          [average[number_dirty_columns:len(average)], dboost_fscore, nadeef_fscore, openrefine_fscore],
          ['Our Algorithm','dBoost','Nadeef', 'OpenRefine'])
plt.show()
