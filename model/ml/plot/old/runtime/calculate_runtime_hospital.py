import matplotlib.pyplot as plt
import numpy as np

from ml.datasets.hospital import HospitalHoloClean

data = HospitalHoloClean()

number_dirty_columns = 17 - 1

init_labels = 4
std_labels = 10
sec_pro_label = 3.0

fscore_all = []


#distinct active learning, no stop criterion
fscore_0 = []
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.090909090909090912, 0.12773109243697481, 0.13712374581939799, 0.23454833597464342, 0.22816901408450704, 0.29999999999999999, 0.38510911424903721, 0.45264452644526448, 0.24475920679886681, 0.27024008933556676, 0.29592959295929588, 0.32540540540540541, 0.32540540540540541, 0.33171782444803444, 0.33171782444803444, 0.33798283261802575, 0.33798283261802575, 0.3466375068343357, 0.35956284153005469, 0.38428417653390745, 0.38428417653390745, 0.41662049861495842, 0.41662049861495842, 0.41662049861495842, 0.41662049861495842, 0.42294713160854897, 0.42383361439010681, 0.42383361439010681, 0.42383361439010681, 0.44284128745837958, 0.3454987834549878, 0.35084882780921578, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.36669335468374697, 0.57071651090342679, 0.57071651090342679, 0.57071651090342679, 0.57071651090342679, 0.57728119180633142, 0.95696721311475408, 0.9727547931382442, 0.9727547931382442, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 0.98425196850393692, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.095070422535211266, 0.16920473773265648, 0.23491027732463293, 0.32507739938080493, 0.30494505494505497, 0.36988110964332893, 0.44974874371859297, 0.50785973397823458, 0.26681367144432189, 0.2922324823465508, 0.31691648822269808, 0.33232016210739618, 0.33232016210739618, 0.33400809716599189, 0.33400809716599189, 0.33764940239043822, 0.33764940239043822, 0.34395548811330301, 0.3447927199191102, 0.35228988424760949, 0.35228988424760949, 0.38322112894873123, 0.38405797101449268, 0.38405797101449268, 0.38656330749354006, 0.41928251121076238, 0.41928251121076238, 0.41928251121076238, 0.43742690058479533, 0.45049218297625943, 0.48040885860306637, 0.48556876061120546, 0.51075877689694238, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.50054884742041716, 0.8958742632612966, 0.8958742632612966, 0.8958742632612966, 0.8958742632612966, 0.9126213592233009, 0.9126213592233009, 0.93027698185291308, 0.93027698185291308, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 0.99605522682445757, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.090909090909090912, 0.15851602023608768, 0.21859706362153342, 0.30959752321981421, 0.26205191594561184, 0.30972388955582231, 0.38532110091743127, 0.44591611479028698, 0.24735729386892175, 0.27201667535174567, 0.29285714285714282, 0.25502255022550224, 0.25502255022550224, 0.25787965616045844, 0.25787965616045844, 0.26829268292682928, 0.26829268292682928, 0.27381443298969077, 0.27594728171334432, 0.28372283722837227, 0.28372283722837227, 0.31798436142484793, 0.3232235701906413, 0.3232235701906413, 0.3232235701906413, 0.55096011816838997, 0.55096011816838997, 0.55820895522388059, 0.7655310621242486, 0.7655310621242486, 0.80388349514563107, 0.83000949667616342, 0.84910965323336451, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.86029411764705876, 0.95218718209562558, 0.97512437810945263, 0.97512437810945263, 0.97512437810945263, 0.97512437810945263, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 0.99307616221562811, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08727272727272728, 0.15114235500878734, 0.19554030874785594, 0.29220779220779225, 0.28242074927953892, 0.27844712182061582, 0.36386768447837148, 0.43170731707317067, 0.23310810810810811, 0.25860155382907879, 0.28430836522689995, 0.31380977968833962, 0.31380977968833962, 0.31742627345844504, 0.31742627345844504, 0.3209351753453773, 0.3209351753453773, 0.3274478330658106, 0.33191035218783349, 0.34690639873083023, 0.34690639873083023, 0.37629146275149539, 0.40748898678414092, 0.40748898678414092, 0.40748898678414092, 0.56793893129770989, 0.56903127383676577, 0.56903127383676577, 0.56903127383676577, 0.54225828262339415, 0.56749672346002622, 0.50028042624789681, 0.52420701168614359, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.52584769316286817, 0.68501086169442438, 0.68501086169442438, 0.68501086169442438, 0.68501086169442438, 0.76328502415458932, 0.77261613691931541, 0.97379032258064513, 0.97379032258064513, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 0.99901671583087515, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
fscore_0.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.090909090909090912, 0.16778523489932884, 0.24437299035369775, 0.33282442748091606, 0.28643216080402012, 0.31922611850060456, 0.39491916859122406, 0.44866071428571425, 0.24906467129877069, 0.27306273062730629, 0.29729729729729726, 0.32515337423312884, 0.32515337423312884, 0.32771822358346092, 0.32771822358346092, 0.33502024291497978, 0.33502024291497978, 0.34312210200927357, 0.34312210200927357, 0.34737923946557042, 0.34737923946557042, 0.39213544511196069, 0.40546448087431691, 0.40546448087431691, 0.40894220283533256, 0.42063937184520467, 0.4215246636771301, 0.4215246636771301, 0.4215246636771301, 0.44677330391616105, 0.47453954496208017, 0.48030221262817052, 0.499196572040707, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.50240513094601824, 0.83407275953859805, 0.83407275953859805, 0.83407275953859805, 0.83407275953859805, 0.83407275953859805, 0.83407275953859805, 0.85039370078740162, 0.85039370078740162, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 0.87307032590051459, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])

matrix = np.matrix(fscore_0)

'''
for i in range(1,len(save_time)):
    print str(i) + ": " + str(save_time[i]-save_time[i-1])
'''

time = 100 #save_time[9]

approx_time = []

average = list(np.mean(matrix, axis=0).A1)

print average

for i in range(number_dirty_columns, len(average)):
    print "time: " + str(time / 60) + " fscore: " + str(average[i])
    approx_time.append(time)
    time = time + (std_labels * sec_pro_label)

def plot_list(y_series, list_series, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    for i in range(len(list_series)):
        ax.plot(np.array(y_series[i]) / 60.0, list_series[i], label=list_names[i])

    ax.set_ylabel('F-score')
    ax.set_xlabel('Runtime in minutes')

    ax.set_xlim([0,35])

    ax.legend(loc=4)

    plt.show()

print len(approx_time)

runtime_dboost = (24 / 60.0)
label_cost_10_rows = (data.shape[1] * 10 * sec_pro_label / 60.0)
time_dboost = runtime_dboost + label_cost_10_rows

dboost_fscore = [0, 0, 0.5763, 0.5763]
dboost_time = [0, (time_dboost-0.001)*60, time_dboost*60, 35*60]

nadeef_time = [0, 4.188138961791992, 8.189311027526855, 12.660043954849243, 17.1141140460968, 21.523464918136597, 25.921068906784058, 30.711513996124268, 34.164653062820435, 38.64398694038391, 35*60]
nadeef_fscore = [0.0, 0.11131725417439704, 0.21403508771929822, 0.28619528619528617, 0.29194630872483224, 0.29765886287625415, 0.39116719242902209, 0.4684684684684684, 0.4684684684684684, 0.52098408104196814, 0.52098408104196814]


openrefine_fscore = [0.0, 0.0, 1.0, 1.0]
openrefine_time = [0, (3-0.001)*60,  3*60, 35*60]

plot_list([approx_time,dboost_time, nadeef_time, openrefine_time],
          [average[number_dirty_columns:len(average)], dboost_fscore, nadeef_fscore, openrefine_fscore],
          ['Our Algorithm','dBoost','Nadeef', 'OpenRefine'])
plt.show()
