import matplotlib.pyplot as plt
import numpy as np

from ml.datasets.blackOak.BlackOakDataSetUppercase import BlackOakDataSetUppercase

data = BlackOakDataSetUppercase()

number_dirty_columns = 10 - 1

init_labels = 4
std_labels = 10
sec_pro_label = 3.0

fscore_all = []
fscore_all.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019724363054314468, 0.34711857588253048, 0.36683973865301972, 0.50302073378485068, 0.50302073378485068, 0.50302073378485068, 0.50302073378485068, 0.68927914099271803, 0.78987634090775527, 0.91562398351946217, 0.96274558340716032, 0.96275571855244002, 0.96275909689018591, 0.96276923177138474, 0.96276923177138474, 0.95525757832562097, 0.9296087632841401, 0.9296087632841401, 0.9295631970563919, 0.92962265877217054, 0.93073721662776832, 0.92961768800185185, 0.94806689957432966, 0.95985053546435073, 0.95985053546435073, 0.95989644112001737, 0.95995281439798508, 0.95995281439798508, 0.96107176227848345, 0.96217488060091694, 0.96818632276802219, 0.96818632276802219])
fscore_all.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06325768492571085, 0.43590238699474054, 0.44687096288248473, 0.54632791030425987, 0.54634441773757025, 0.54636915914381434, 0.54572256891553239, 0.67348404904390513, 0.7382603956139191, 0.8698257510052827, 0.93311187597522882, 0.9331187979095773, 0.9331516714515109, 0.93420458642001369, 0.95484745240213098, 0.97224891604963204, 0.89224119470644636, 0.89224119470644636, 0.89225214303127753, 0.89230323235251485, 0.89193024274130084, 0.8903832557833643, 0.8857692971796618, 0.87424104334877994, 0.87424104334877994, 0.87424104334877994, 0.87425710801617362, 0.87475760572243133, 0.8761553987170092, 0.88226503467549944, 0.94375436601413365, 0.94375436601413365])
fscore_all.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.077347124000268011, 0.46175709810616072, 0.47326504459409485, 0.61372494703617153, 0.61373576425330367, 0.61373576425330367, 0.61411105351568118, 0.7533598534010052, 0.80056088320606167, 0.9284853606763569, 0.92891774777393199, 0.92891774777393199, 0.92892128530238427, 0.92376790562835076, 0.92763237442280722, 0.95983815375393366, 0.96848420339639063, 0.96848420339639063, 0.96850416557810093, 0.96851081946697726, 0.974058311176904, 0.97356833915652485, 0.9766624713255444, 0.97842535093922867, 0.97842535093922867, 0.97842535093922867, 0.97844844288869648, 0.97802102168889071, 0.97883266775481759, 0.97949389461190639, 0.9814345528442161, 0.9814345528442161])
fscore_all.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.041830521572757802, 0.43252256330195565, 0.44166900079436872, 0.57582193458247855, 0.57582193458247855, 0.57583337013557945, 0.57583337013557945, 0.73974023391023602, 0.80343210402899168, 0.93479842357302356, 0.95807940665439184, 0.95808278415113668, 0.95808278415113668, 0.95809291650999062, 0.95814170564041734, 0.97302937033752424, 0.94856643904324844, 0.94852438800846528, 0.94852789238983359, 0.94856643904324844, 0.94893859249075396, 0.94718949300983712, 0.94319700394304851, 0.94881400713764619, 0.94885545850667408, 0.94885891263986322, 0.94884054113556981, 0.94875789667435795, 0.95073307602123491, 0.95794831740316144, 0.97127995802996758, 0.97127995802996758])
fscore_all.append([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029844774663824306, 0.38699193083843414, 0.4088931940312277, 0.48623366188897971, 0.48623366188897971, 0.48626623912310524, 0.48626623912310524, 0.58848328127230298, 0.65843586247679742, 0.78994887801636027, 0.89257349494408345, 0.89258091086244662, 0.89264466102631224, 0.89264836849893869, 0.94148183105238314, 0.96213939206275478, 0.9637235299610093, 0.9637235299610093, 0.96373687582705225, 0.96382671852061708, 0.96383005437564584, 0.96569694783359306, 0.97434033771593964, 0.97813173985727264, 0.97813173985727264, 0.97813834826668555, 0.97818460473944069, 0.97818460473944069, 0.97821623386911627, 0.98154625419403307, 0.98058829005531056, 0.98058829005531056])

matrix = np.matrix(fscore_all)


time = 100 #save_time[9]

approx_time = []

average = list(np.mean(matrix, axis=0).A1)

print average

for i in range(number_dirty_columns, len(average)):
    print "time: " + str(time / 60) + " fscore: " + str(average[i])
    approx_time.append(time)
    time = time + (std_labels * sec_pro_label)

def plot_list(y_series, list_series, list_names):
    fig = plt.figure()
    ax = plt.subplot(111)

    for i in range(len(list_series)):
        ax.plot(np.array(y_series[i]) / 60.0, list_series[i], label=list_names[i])

    ax.set_ylabel('F-score')
    ax.set_xlabel('Runtime in minutes')

    ax.legend(loc=8)

    plt.show()

print len(approx_time)

runtime_dboost = ((355.5 + 17) / 60.0)
label_cost_10_rows = (data.shape[1] * 10 * sec_pro_label / 60.0)
time_dboost = runtime_dboost + label_cost_10_rows

print time_dboost

dboost_fscore = [0, 0, 0.327, 0.327]
dboost_time = [0, (time_dboost-0.001)*60, time_dboost*60, 35*60]

nadeef_time = [115.14512801170349, 264.73492312431335, 392.79481291770935, 4055.6318440437317, 7041.999365091324]
nadeef_fscore = [0.046220859406105333, 0.2017617151875577, 0.19074416347434611, 0.19074416347434611, 0.19074416347434611]

openrefine_fscore = [0.0, 0.0, 0.904, 0.904]
openrefine_time = [0, (2.5-0.001)*60,  2.5*60, 35*60]

plot_list([approx_time,dboost_time, nadeef_time, openrefine_time],
          [average[number_dirty_columns:len(average)], dboost_fscore, nadeef_fscore, openrefine_fscore],
          ['Our Algorithm','dBoost','Nadeef', 'OpenRefine'])
plt.show()
